// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                String              @id @default(uuid())
  email             String              @db.Char(100)
  name              String              @db.Char(20)
  lastName          String              @db.Char(20)
  secondLastName    String?             @db.Char(20)
  userName          String              @db.Char(100)
  password          String?             @db.Char(65)
  idOTP             String?             @db.Char(50)
  idProfile_img     String?             @db.Char(50)
  isActive          Boolean             @default(false)
  isAdmin           Boolean             @default(false)
  isVerified        Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  //relations
  otp               OTP?                @relation(fields: [idOTP], references: [id])
  image             img_Users?          @relation(fields: [idProfile_img], references: [id])
  TravelsU1         Travels[]           @relation(name: "TravelsID_1")
  TravelsU2         Travels[]           @relation(name: "TravelsID_2")
  Chat_MessagesU1   Chat_Messages[]     @relation(name: "ChatRelation1")
  Chat_MessagesU2   Chat_Messages[]     @relation(name: "ChatRelation2")
  ExpensesU1        det_Expenses[]      @relation(name: "ExpensesRelation1")
  ExpensesU2        det_Expenses[]      @relation(name: "ExpensesRelation2")
  UserComentsU1     User_Comments[]     @relation(name: "UserComentsRelation1")
  UserComentsU2     User_Comments[]     @relation(name: "UserComentsRelation2")
  Travel_RequestU2  Travel_Request[]    @relation(name: "TravelRequestRelation1")
  Travel_RequestU1  Travel_Request[]    @relation(name: "TravelRequestRelation2")
  Location_Comments Location_Comments[]
  UsersRequest      UsersRequest[]
  Programadores     Programadores[]
}

model OTP {
  id        String   @id @default(uuid())
  otp       Int      @db.Int
  token     String?  @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relations
  Users     Users[]
}

model Travels {
  id                String           @id @default(uuid())
  id_user1          String           @db.Char(50)
  id_user2          String?          @db.Char(50)
  id_location       String           @db.Char(50)
  id_transportation Int              @db.Int
  id_extras         String?          @db.Char(50)
  isActive          Boolean          @default(true)
  travel_date       String           @db.Char(10)
  companions        Int              @db.Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  //relations
  user1             Users            @relation(name: "TravelsID_1", fields: [id_user1], references: [id])
  user2             Users?           @relation(name: "TravelsID_2", fields: [id_user2], references: [id])
  location          cat_Locations    @relation(fields: [id_location], references: [id])
  transportation    cat_Transport    @relation(fields: [id_transportation], references: [id])
  extras            det_Extras?      @relation(fields: [id_extras], references: [id])
  det_Expenses      det_Expenses[]
  Travel_Request    Travel_Request[]
}

model cat_Locations {
  id                String              @id @default(uuid())
  id_locationImage1 String              @db.Char(50)
  id_locationImage2 String              @db.Char(50)
  location_name     String              @db.Char(80)
  location          String              @db.Char(255)
  description       String              @db.Char(255)
  rate              Decimal?            @db.Decimal()
  cost              Decimal             @db.Decimal()
  schedule          String              @db.Char(20)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  //relations
  Travels           Travels[]
  locationImage1    img_Locations       @relation(name: "LocationImg1", fields: [id_locationImage1], references: [id])
  locationImage2    img_Locations       @relation(name: "LocationImg2", fields: [id_locationImage2], references: [id])
  Location_Comments Location_Comments[]
}

model Location_Comments {
  id          String        @id @default(uuid())
  id_user     String        @db.Char(50)
  id_location String        @db.Char(50)
  comment     String        @db.Char(125)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  //relations
  user        Users         @relation(fields: [id_user], references: [id])
  location    cat_Locations @relation(fields: [id_location], references: [id])
}

model det_Extras {
  id               String    @id @default(uuid())
  extra_commentary String    @db.Char(125)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  //relations
  Travels          Travels[]
}

model cat_Transport {
  id        Int      @id @default(autoincrement())
  transport String   @db.Char(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relations

  Travels Travels[]
}

model img_Locations {
  id             String          @id @default(uuid())
  image          String          @db.Text
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  //relations
  cat_Locations1 cat_Locations[] @relation(name: "LocationImg1")
  cat_Locations2 cat_Locations[] @relation(name: "LocationImg2")
}

model img_Users {
  id        String   @id @default(uuid())
  image     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relations
  Users     Users[]
}

model Chat_Messages {
  id        String   @id @default(uuid())
  id_user1  String   @db.Char(50)
  id_user2  String   @db.Char(50)
  users     Json     @db.Json
  message   String   @db.Char(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relations
  user1     Users    @relation(name: "ChatRelation1", fields: [id_user1], references: [id])
  user2     Users    @relation(name: "ChatRelation2", fields: [id_user2], references: [id])
}

model det_Expenses {
  id        String   @id @default(uuid())
  id_user1  String   @db.Char(50)
  id_user2  String?  @db.Char(50)
  id_travel String?  @db.Char(50)
  expense   String   @db.Char(20)
  quantity  Decimal  @db.Decimal()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relations
  user1     Users    @relation(name: "ExpensesRelation1", fields: [id_user1], references: [id])
  user2     Users?   @relation(name: "ExpensesRelation2", fields: [id_user2], references: [id])
  travel    Travels? @relation(fields: [id_travel], references: [id])
}

model User_Comments {
  id              String   @id @default(uuid())
  id_userComented String   @db.Char(50)
  id_userComent   String   @db.Char(50)
  comentary_text  String   @db.Char(125)
  rate            Decimal  @db.Decimal()
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  //relations
  user1           Users    @relation(name: "UserComentsRelation1", fields: [id_userComented], references: [id])
  user2           Users    @relation(name: "UserComentsRelation2", fields: [id_userComent], references: [id])
}

model Travel_Request {
  id        String   @id @default(uuid())
  id_user1  String   @db.Char(50)
  id_user2  String   @db.Char(50)
  id_travel String   @db.Char(50)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relations
  user1     Users    @relation(name: "TravelRequestRelation1", fields: [id_user1], references: [id])
  user2     Users    @relation(name: "TravelRequestRelation2", fields: [id_user2], references: [id])
  travel    Travels  @relation(fields: [id_travel], references: [id])
}

model img_Documents {
  id            String         @id @default(uuid())
  image         String         @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  //relations
  UsersRequest1 UsersRequest[] @relation(name: "imageDocuments1")
  UsersRequest2 UsersRequest[] @relation(name: "imageDocuments2")
  UsersRequest3 UsersRequest[] @relation(name: "imageDocuments3")
}

model UsersRequest {
  id             String        @id @default(uuid())
  idUserImage    String        @db.Char(50)
  idIDImageFront String        @db.Char(50)
  idIDImageBack  String        @db.Char(50)
  isActive       Boolean       @default(true)
  idUser         String        @db.Char(50)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  //relations
  image1         img_Documents @relation(name: "imageDocuments1", fields: [idUserImage], references: [id])
  image2         img_Documents @relation(name: "imageDocuments2", fields: [idIDImageFront], references: [id])
  image3         img_Documents @relation(name: "imageDocuments3", fields: [idIDImageBack], references: [id])
  user           Users         @relation(fields: [idUser], references: [id])
}

model Ticket {
  id                    String              @id @default(uuid())
  id_programador        String?             @db.Char(50)
  tipo_ticket           TicketType
  estatus               TicketStatus        @default(NEW)
  prioridad             TicketPriority      @default(NONE)
  email_usuario_reporte String              @db.MediumText
  descripcion           String              @db.Text
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  //relations
  programador           Programadores?      @relation(fields: [id_programador], references: [id])
  Tickets_Asignados     Tickets_Asignados[]
  img_Tickets           img_Tickets[]
}

enum TicketStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

enum TicketPriority {
  NONE
  LOW
  MIDDLE
  HIGH
}

enum TicketType {
  INCIDENT
  SERVICE_REQUEST
  QUERY
  TECHNICAL_PROBLEM
  ENHANCEMENT
  COMPLAINT
}

model Programadores {
  id                String              @id @default(uuid())
  id_user           String              @db.Char(50)
  // relations
  user              Users               @relation(fields: [id_user], references: [id])
  Ticket            Ticket[]
  Tickets_Asignados Tickets_Asignados[]
}

model Update {
  id          String   @id @default(uuid())
  number      String   @db.Char(10)
  name        String   @db.Char(50)
  description String   @db.MediumText
  ticketIds   Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tickets_Asignados {
  id             String        @id @default(uuid())
  id_programador String        @db.Char(50)
  id_ticket      String        @db.Char(50)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  //relations
  programador    Programadores @relation(fields: [id_programador], references: [id])
  ticket         Ticket        @relation(fields: [id_ticket], references: [id])
}

model img_Tickets {
  id        String   @id @default(uuid())
  id_Ticket String   @db.Char(50)
  image     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relations
  ticket    Ticket   @relation(fields: [id_Ticket], references: [id])
}
